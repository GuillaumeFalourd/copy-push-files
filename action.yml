name: 'Copy Push Files action'

description: 'GitHub Action to copy & push contents (files / directory) from a repository to another :octocat:'

inputs:
  email:
    description: Committer's email address
    required: true
    default: ${{ github.actor }}@users.noreply.github.com
  name:
    description: Committer's username
    required: true
    default: ${{ github.actor }}
  source_files:
    description: Files or directories to add separated by space
    required: true
  commit_message:
    description: Commit message
    required: true
    default: Commit performed using Copy Push Files action
  target_branch:
    description: Branch to push the contents to
    required: true
    default: 'copy-push-files-branch'
  target_dir:
    description: Directory to push the contents to on the new repository
    required: false
  remote_repository:
    description: Repository url to push the code to
    required: true
    default: origin
  access_token:
    description: Token used to push the code
    required: true

runs:
  using: "composite"
  steps:
    - name: Copy contents from current repository to destination Github repository
      run: |

        if [ -z "${{ inputs.access_token }}" ]; then
          echo "WARNING: The access_token input is mandatory to push files to another repository."
          exit 1
        fi

        REGEX="^(https|git)(:\/\/|@)([^\/:]+)[\/:]([^\/:]+)\/(.+)$"

        if [[ ${{ inputs.remote_repository }} =~ $REGEX ]]; then
            PROTOCOL=${BASH_REMATCH[1]}
            SEPARATOR=${BASH_REMATCH[2]}
            HOSTNAME=${BASH_REMATCH[3]}
            DESTINATION_OWNER=${BASH_REMATCH[4]}
            DESTINATION_REPOSITORY=${BASH_REMATCH[5]}
            DESTINATION_REPOSITORY=${DESTINATION_REPOSITORY//.git/ }

            CLONE_DIRECTORY=$(mktemp -d)

            echo "##### Cloning destination Github repository #####"
            # Setup git
            git config --global user.email "${{ inputs.email }}"
            git config --global user.name "${{ inputs.name }}"
            git config -l | grep 'http\..*\.extraheader' | cut -d= -f1 | xargs -L1 git config --unset-all
            git clone "https://${{ inputs.access_token }}@github.com/$DESTINATION_OWNER/$DESTINATION_REPOSITORY.git" "$CLONE_DIRECTORY"
            ls -la "$CLONE_DIRECTORY"

            echo
            echo "##### Copying contents to destination Github repository #####"
            if [ -z "${{ inputs.target_dir }}" ]; then
              cp -rvf "${{ inputs.source_files }}" "$CLONE_DIRECTORY"
            else
              mkdir -p "$CLONE_DIRECTORY/${{ inputs.target_dir }}"
              cp -rvf "${{ inputs.source_files }}" "$CLONE_DIRECTORY/${{ inputs.target_dir }}"
            fi

            cd "$CLONE_DIRECTORY"
            ls -lha

            # Create new branch (if necessary)
            REMOTE_URL=https://$DESTINATION_OWNER:${{ inputs.access_token }}@github.com/$DESTINATION_OWNER/$DESTINATION_REPOSITORY
            git remote set-url origin $REMOTE_URL
            git fetch origin
            BE=$(git ls-remote --heads origin ${{ inputs.target_branch }} | wc -l)
            if [[ $BE == *"0"* ]]; then
              echo "##### Target branch doesn't exist. Creating new branch #####"
              git checkout -f -b ${{ inputs.target_branch }}
            else
              git checkout -f ${{ inputs.target_branch }}
            fi
            ls -lha
            if [ -z "${{ inputs.target_dir }}" ]; then
              git add ${{ inputs.source_files }}
            else
              git add ${{ inputs.target_dir }}/${{ inputs.source_files }}
            fi
            git status

            # Won't commit if no changes were made
            git diff-index --quiet HEAD || git commit --message "${{ inputs.commit_message }}"

            echo
            echo "##### Pushing git commit #####"
            git push -f -u origin "${{ inputs.target_branch }}"

        else
          echo
          echo "WARNING: Couldn't read remote_repository URL input."
          echo "ACCEPTED FORMAT:"
          echo "git://github.com/<owner>/<repo>.git"
          echo "or"
          echo "git@github.com:<owner>/<repo>.git"
          echo "or"
          echo "https://github.com/<owner>/<repo>.git"
          echo "or"
          echo "https://github.com/<owner>/<repo>"
          exit 1
        fi
      shell: bash

branding:
    icon: 'git-commit'
    color: 'black'
